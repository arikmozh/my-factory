{"ast":null,"code":"// import { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import { useNavigate } from \"react-router-dom\";\n// import employeesUtils from \"../Utils/employeesUtils\";\n// import { Link } from \"react-router-dom\";\n// import axios from \"axios\";\n// import { Typography, Grid, TextField, Container, Button } from \"@mui/material\";\n// import { typography } from \"@mui/system\";\n// import EditEmployeeShiftTable from \"../Components/EditEmployeeShiftTable\";\n// import EditEmployeeSelect from \"../Components/EditEmployeeSelect\";\n// import { useSelector } from \"react-redux\";\n// const EditEmployeePage = () => {\n//   let token = sessionStorage[\"token\"];\n//   const storeData = useSelector((state) => state);\n//   const navigate = useNavigate();\n//   const params = useParams();\n//   const [employee, setEmployee] = useState({});\n//   const [updated, setUpdated] = useState(false);\n//   const [AllShifts, setAllShifts] = useState({});\n//   const [allocateBTN, setAllocateBTN] = useState(false);\n//   const [SelectedShiftToAdd, setSelectedShiftToAdd] = useState(\"\");\n//   const [AllocateOptions, setAllocateOptions] = useState([]);\n//   const [shift_id, setShift_id] = useState(\"\");\n//   useEffect(async () => {\n//     let all_db_data = storeData.db;\n//     let employee = all_db_data.employees[params.id];\n//     setEmployee(employee);\n//     setAllShifts(all_db_data.shifts);\n//     let Emp_Shift_ids;\n//     let options = [];\n//     if (all_db_data.employees[params.id].hasOwnProperty(\"Shifts\")) {\n//       Emp_Shift_ids = all_db_data.employees[params.id].Shifts.map((s) => s._id);\n//       for (let i = 0; i < all_db_data.shifts.length; i++) {\n//         if (!Emp_Shift_ids.includes(all_db_data.shifts[i]._id)) {\n//           options.push(all_db_data.shifts[i]);\n//         }\n//       }\n//     } else {\n//       options = all_db_data.shifts;\n//     }\n//     setAllocateOptions(options);\n//   }, []);\n//   useEffect(async () => {\n//     let resp = await axios.get(\"http://127.0.0.1:5000/getAllFactory\");\n//     let all_db_data = resp.data;\n//     let employee = all_db_data.employees[params.id];\n//     setEmployee(employee);\n//     setAllShifts(all_db_data.shifts);\n//     let Emp_Shift_ids;\n//     let options = [];\n//     if (all_db_data.employees[params.id].hasOwnProperty(\"Shifts\")) {\n//       Emp_Shift_ids = all_db_data.employees[params.id].Shifts.map((s) => s._id);\n//       for (let i = 0; i < all_db_data.shifts.length; i++) {\n//         if (!Emp_Shift_ids.includes(all_db_data.shifts[i]._id)) {\n//           options.push(all_db_data.shifts[i]);\n//         }\n//       }\n//     } else {\n//       options = all_db_data.shifts;\n//     }\n//     // return options;\n//     setAllocateOptions(options);\n//   }, [allocateBTN]);\n//   const UpdateUserData = async () => {\n//     console.log(employee);\n//     await employeesUtils.update_employee(token, employee._id, employee);\n//     setUpdated(!updated);\n//   };\n//   const DeleteUserData = async () => {\n//     await employeesUtils.delete_employee(token, employee._id);\n//     navigate(\"/mainPage/employeePage\");\n//   };\n//   const alocate_shift_to_emp = async () => {\n//     await employeesUtils.add_shift_to_employee(token, employee._id, shift_id);\n//     setAllocateBTN(!allocateBTN);\n//   };\n//   return (\n//     <Container>\n//       <Typography\n//         variant=\"h4\"\n//         style={{ marginTop: \"35px\", marginBottom: \"35px\" }}\n//       >\n//         <b> Edit Employee - Page</b>\n//       </Typography>\n//       <Grid>\n//         <form>\n//           <Typography>First name:</Typography>\n//           <TextField\n//             varient=\"outlined\"\n//             required\n//             value={employee.FirstName}\n//             onChange={(e) =>\n//               setEmployee({ ...employee, FirstName: e.target.value })\n//             }\n//           />\n//           <Typography>Last name:</Typography>\n//           <TextField\n//             varient=\"outlined\"\n//             required\n//             value={employee.LastName}\n//             onChange={(e) =>\n//               setEmployee({ ...employee, LastName: e.target.value })\n//             }\n//           />\n//           <Typography>Start work year:</Typography>\n//           <TextField\n//             varient=\"outlined\"\n//             required\n//             value={employee.StartWorkYear}\n//             onChange={(e) =>\n//               setEmployee({ ...employee, StartWorkYear: e.target.value })\n//             }\n//           />\n//           <Typography>Department: </Typography>\n//           {employee.hasOwnProperty(\"DepartmentId\") &&\n//             employee.DepartmentId.map((item, index) => {\n//               return (\n//                 <Link\n//                   to={\"/mainPage/editdepartmentPage/\" + item._id}\n//                   style={{ color: \"black\", textDecoration: \"underline\" }}\n//                   key={index}\n//                 >\n//                   {item.Name}\n//                 </Link>\n//               );\n//             })}\n//           <Typography>Shifts: </Typography>\n//           {/* <EditEmployeeShiftTable employee={employee} /> */}\n//           <Typography>Select shift to allocate:</Typography>\n//           {/* <EditEmployeeSelect\n//             AllocateOptions={AllocateOptions}\n//             setShift_id={setShift_id}\n//           /> */}\n//         </form>\n//         <Button\n//           // type=\"submit\"\n//           variant=\"contained\"\n//           onClick={UpdateUserData}\n//         >\n//           UPDATE\n//         </Button>\n//         <Button\n//           // type=\"submit\"\n//           variant=\"contained\"\n//           onClick={DeleteUserData}\n//         >\n//           DELETE\n//         </Button>\n//         <Button\n//           // type=\"submit\"\n//           variant=\"contained\"\n//           onClick={alocate_shift_to_emp}\n//         >\n//           Allocate\n//         </Button>\n//         <br />\n//         <br />\n//         {allocateBTN && <text>Allocated!</text>}\n//         {updated && <text>Updated!</text>}\n//       </Grid>\n//     </Container>\n//   );\n// };\n// export default EditEmployeePage;","map":{"version":3,"sources":["/Users/arikmoz/Desktop/Bootcamp/Projects/my-factory-v1/src/Pages/EditEmployeePage.js"],"names":[],"mappingssourcesContent":["// import { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import { useNavigate } from \"react-router-dom\";\n// import employeesUtils from \"../Utils/employeesUtils\";\n// import { Link } from \"react-router-dom\";\n// import axios from \"axios\";\n// import { Typography, Grid, TextField, Container, Button } from \"@mui/material\";\n// import { typography } from \"@mui/system\";\n// import EditEmployeeShiftTable from \"../Components/EditEmployeeShiftTable\";\n// import EditEmployeeSelect from \"../Components/EditEmployeeSelect\";\n// import { useSelector } from \"react-redux\";\n// const EditEmployeePage = () => {\n//   let token = sessionStorage[\"token\"];\n//   const storeData = useSelector((state) => state);\n//   const navigate = useNavigate();\n//   const params = useParams();\n//   const [employee, setEmployee] = useState({});\n//   const [updated, setUpdated] = useState(false);\n//   const [AllShifts, setAllShifts] = useState({});\n//   const [allocateBTN, setAllocateBTN] = useState(false);\n//   const [SelectedShiftToAdd, setSelectedShiftToAdd] = useState(\"\");\n//   const [AllocateOptions, setAllocateOptions] = useState([]);\n//   const [shift_id, setShift_id] = useState(\"\");\n\n//   useEffect(async () => {\n//     let all_db_data = storeData.db;\n//     let employee = all_db_data.employees[params.id];\n//     setEmployee(employee);\n//     setAllShifts(all_db_data.shifts);\n\n//     let Emp_Shift_ids;\n//     let options = [];\n//     if (all_db_data.employees[params.id].hasOwnProperty(\"Shifts\")) {\n//       Emp_Shift_ids = all_db_data.employees[params.id].Shifts.map((s) => s._id);\n\n//       for (let i = 0; i < all_db_data.shifts.length; i++) {\n//         if (!Emp_Shift_ids.includes(all_db_data.shifts[i]._id)) {\n//           options.push(all_db_data.shifts[i]);\n//         }\n//       }\n//     } else {\n//       options = all_db_data.shifts;\n//     }\n//     setAllocateOptions(options);\n//   }, []);\n\n//   useEffect(async () => {\n//     let resp = await axios.get(\"http://127.0.0.1:5000/getAllFactory\");\n//     let all_db_data = resp.data;\n//     let employee = all_db_data.employees[params.id];\n//     setEmployee(employee);\n//     setAllShifts(all_db_data.shifts);\n\n//     let Emp_Shift_ids;\n//     let options = [];\n//     if (all_db_data.employees[params.id].hasOwnProperty(\"Shifts\")) {\n//       Emp_Shift_ids = all_db_data.employees[params.id].Shifts.map((s) => s._id);\n\n//       for (let i = 0; i < all_db_data.shifts.length; i++) {\n//         if (!Emp_Shift_ids.includes(all_db_data.shifts[i]._id)) {\n//           options.push(all_db_data.shifts[i]);\n//         }\n//       }\n//     } else {\n//       options = all_db_data.shifts;\n//     }\n//     // return options;\n//     setAllocateOptions(options);\n//   }, [allocateBTN]);\n\n//   const UpdateUserData = async () => {\n//     console.log(employee);\n//     await employeesUtils.update_employee(token, employee._id, employee);\n//     setUpdated(!updated);\n//   };\n\n//   const DeleteUserData = async () => {\n//     await employeesUtils.delete_employee(token, employee._id);\n//     navigate(\"/mainPage/employeePage\");\n//   };\n\n//   const alocate_shift_to_emp = async () => {\n//     await employeesUtils.add_shift_to_employee(token, employee._id, shift_id);\n//     setAllocateBTN(!allocateBTN);\n//   };\n\n//   return (\n//     <Container>\n//       <Typography\n//         variant=\"h4\"\n//         style={{ marginTop: \"35px\", marginBottom: \"35px\" }}\n//       >\n//         <b> Edit Employee - Page</b>\n//       </Typography>\n//       <Grid>\n//         <form>\n//           <Typography>First name:</Typography>\n//           <TextField\n//             varient=\"outlined\"\n//             required\n//             value={employee.FirstName}\n//             onChange={(e) =>\n//               setEmployee({ ...employee, FirstName: e.target.value })\n//             }\n//           />\n//           <Typography>Last name:</Typography>\n//           <TextField\n//             varient=\"outlined\"\n//             required\n//             value={employee.LastName}\n//             onChange={(e) =>\n//               setEmployee({ ...employee, LastName: e.target.value })\n//             }\n//           />\n//           <Typography>Start work year:</Typography>\n//           <TextField\n//             varient=\"outlined\"\n//             required\n//             value={employee.StartWorkYear}\n//             onChange={(e) =>\n//               setEmployee({ ...employee, StartWorkYear: e.target.value })\n//             }\n//           />\n//           <Typography>Department: </Typography>\n//           {employee.hasOwnProperty(\"DepartmentId\") &&\n//             employee.DepartmentId.map((item, index) => {\n//               return (\n//                 <Link\n//                   to={\"/mainPage/editdepartmentPage/\" + item._id}\n//                   style={{ color: \"black\", textDecoration: \"underline\" }}\n//                   key={index}\n//                 >\n//                   {item.Name}\n//                 </Link>\n//               );\n//             })}\n//           <Typography>Shifts: </Typography>\n//           {/* <EditEmployeeShiftTable employee={employee} /> */}\n//           <Typography>Select shift to allocate:</Typography>\n//           {/* <EditEmployeeSelect\n//             AllocateOptions={AllocateOptions}\n//             setShift_id={setShift_id}\n//           /> */}\n//         </form>\n//         <Button\n//           // type=\"submit\"\n//           variant=\"contained\"\n//           onClick={UpdateUserData}\n//         >\n//           UPDATE\n//         </Button>\n//         <Button\n//           // type=\"submit\"\n//           variant=\"contained\"\n//           onClick={DeleteUserData}\n//         >\n//           DELETE\n//         </Button>\n//         <Button\n//           // type=\"submit\"\n//           variant=\"contained\"\n//           onClick={alocate_shift_to_emp}\n//         >\n//           Allocate\n//         </Button>\n//         <br />\n//         <br />\n//         {allocateBTN && <text>Allocated!</text>}\n//         {updated && <text>Updated!</text>}\n//       </Grid>\n//     </Container>\n//   );\n// };\n\n// export default EditEmployeePage;\n"]},"metadata":{},"sourceType":"module"}