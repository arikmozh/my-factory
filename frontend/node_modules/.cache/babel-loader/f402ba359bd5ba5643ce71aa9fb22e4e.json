{"ast":null,"code":"var _jsxFileName = \"/Users/arikmoz/Desktop/Bootcamp/Projects/my-factory-v1/src/Pages/EditEmployeePage.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useNavigate } from \"react-router-dom\";\nimport employeesUtils from \"../Utils/employeesUtils\";\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { Typography, Grid, TextField, Container, Button, ButtonGroup } from \"@mui/material\";\nimport { typography } from \"@mui/system\";\nimport EditEmployeeShiftTable from \"../Components/EditEmployeeShiftTable\";\nimport EditEmployeeSelect from \"../Components/EditEmployeeSelect\";\nimport { useSelector } from \"react-redux\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport SendIcon from \"@mui/icons-material/Send\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditEmployeePage = () => {\n  _s();\n\n  let token = sessionStorage[\"token\"];\n  const storeData = useSelector(state => state);\n  const navigate = useNavigate();\n  const params = useParams();\n  const [employee, setEmployee] = useState({});\n  const [updated, setUpdated] = useState(false);\n  const [AllShifts, setAllShifts] = useState({});\n  const [allocateBTN, setAllocateBTN] = useState(false);\n  const [SelectedShiftToAdd, setSelectedShiftToAdd] = useState(\"\");\n  const [AllocateOptions, setAllocateOptions] = useState([]);\n  const [shift_id, setShift_id] = useState(\"\");\n  useEffect(async () => {\n    let all_db_data = storeData.db;\n    let employee = all_db_data.employees[params.id];\n    setEmployee(employee);\n    setAllShifts(all_db_data.shifts);\n    let Emp_Shift_ids;\n    let options = [];\n\n    if (all_db_data !== null && all_db_data !== void 0 && all_db_data.employees[params.id].hasOwnProperty(\"Shifts\")) {\n      Emp_Shift_ids = all_db_data.employees[params.id].Shifts.map(s => s._id);\n\n      for (let i = 0; i < all_db_data.shifts.length; i++) {\n        if (!Emp_Shift_ids.includes(all_db_data.shifts[i]._id)) {\n          options.push(all_db_data.shifts[i]);\n        }\n      }\n    } else {\n      options = all_db_data.shifts;\n    }\n\n    setAllocateOptions(options);\n  }, []);\n  useEffect(async () => {\n    let resp = await axios.get(\"http://127.0.0.1:5000/getAllFactory\");\n    let all_db_data = resp.data;\n    let employee = all_db_data.employees[params.id];\n    setEmployee(employee);\n    setAllShifts(all_db_data.shifts);\n    let Emp_Shift_ids;\n    let options = [];\n\n    if (all_db_data.employees[params.id].hasOwnProperty(\"Shifts\")) {\n      Emp_Shift_ids = all_db_data.employees[params.id].Shifts.map(s => s._id);\n\n      for (let i = 0; i < all_db_data.shifts.length; i++) {\n        if (!Emp_Shift_ids.includes(all_db_data.shifts[i]._id)) {\n          options.push(all_db_data.shifts[i]);\n        }\n      }\n    } else {\n      options = all_db_data.shifts;\n    } // return options;\n\n\n    setAllocateOptions(options);\n  }, [allocateBTN]);\n\n  const UpdateUserData = async () => {\n    console.log(employee);\n    await employeesUtils.update_employee(token, employee._id, employee);\n    setUpdated(!updated);\n  };\n\n  const DeleteUserData = async () => {\n    await employeesUtils.delete_employee(token, employee._id);\n    navigate(\"/mainPage/employeePage\");\n  };\n\n  const alocate_shift_to_emp = async () => {\n    await employeesUtils.add_shift_to_employee(token, employee._id, shift_id);\n    setAllocateBTN(!allocateBTN);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      pb: 2,\n      color: \"primary.second\",\n      children: /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \" Edit Employee Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          children: \"First name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          varient: \"outlined\",\n          required: true,\n          fullWidth: true,\n          value: employee.FirstName,\n          onChange: e => setEmployee({ ...employee,\n            FirstName: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: \"Last name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          varient: \"outlined\",\n          required: true,\n          fullWidth: true,\n          value: employee.LastName,\n          onChange: e => setEmployee({ ...employee,\n            LastName: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: \"Start work year:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          varient: \"outlined\",\n          required: true,\n          fullWidth: true,\n          value: employee.StartWorkYear,\n          onChange: e => setEmployee({ ...employee,\n            StartWorkYear: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: \"Department: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), employee.hasOwnProperty(\"DepartmentId\") && employee.DepartmentId.map((item, index) => {\n          return /*#__PURE__*/_jsxDEV(Button, {\n            fullWidth: true,\n            variant: \"contained\" // color=\"secondary\"\n            ,\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/mainPage/editdepartmentPage/\" + item._id,\n              style: {\n                color: \"white\",\n                textDecoration: \"underline\"\n              },\n              children: item.Name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 19\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 17\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(Typography, {\n          children: \"Shifts: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(EditEmployeeShiftTable, {\n          employee: employee\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: \"Select shift to allocate:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(EditEmployeeSelect, {\n          AllocateOptions: AllocateOptions,\n          setShift_id: setShift_id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n        fullWidth: true,\n        sx: {\n          m: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button // type=\"submit\"\n        , {\n          variant: \"contained\",\n          onClick: UpdateUserData,\n          endIcon: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 22\n          }, this),\n          children: \"UPDATE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button // type=\"submit\"\n        , {\n          variant: \"contained\",\n          onClick: DeleteUserData,\n          startIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 24\n          }, this),\n          children: \"DELETE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button // type=\"submit\"\n        , {\n          variant: \"contained\",\n          onClick: alocate_shift_to_emp,\n          children: \"Allocate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), allocateBTN && /*#__PURE__*/_jsxDEV(\"text\", {\n        children: \"Allocated!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 25\n      }, this), updated && /*#__PURE__*/_jsxDEV(\"text\", {\n        children: \"Updated!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EditEmployeePage, \"qTCGWRJ8JLitidlYaG71butcHmE=\", false, function () {\n  return [useSelector, useNavigate, useParams];\n});\n\n_c = EditEmployeePage;\nexport default EditEmployeePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditEmployeePage\");","map":{"version":3,"sources":["/Users/arikmoz/Desktop/Bootcamp/Projects/my-factory-v1/src/Pages/EditEmployeePage.js"],"names":["useState","useEffect","useParams","useNavigate","employeesUtils","Link","axios","Typography","Grid","TextField","Container","Button","ButtonGroup","typography","EditEmployeeShiftTable","EditEmployeeSelect","useSelector","DeleteIcon","SendIcon","EditEmployeePage","token","sessionStorage","storeData","state","navigate","params","employee","setEmployee","updated","setUpdated","AllShifts","setAllShifts","allocateBTN","setAllocateBTN","SelectedShiftToAdd","setSelectedShiftToAdd","AllocateOptions","setAllocateOptions","shift_id","setShift_id","all_db_data","db","employees","id","shifts","Emp_Shift_ids","options","hasOwnProperty","Shifts","map","s","_id","i","length","includes","push","resp","get","data","UpdateUserData","console","log","update_employee","DeleteUserData","delete_employee","alocate_shift_to_emp","add_shift_to_employee","FirstName","e","target","value","LastName","StartWorkYear","DepartmentId","item","index","color","textDecoration","Name","m"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useNavigate } from \"react-router-dom\";\nimport employeesUtils from \"../Utils/employeesUtils\";\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport {\n  Typography,\n  Grid,\n  TextField,\n  Container,\n  Button,\n  ButtonGroup,\n} from \"@mui/material\";\nimport { typography } from \"@mui/system\";\nimport EditEmployeeShiftTable from \"../Components/EditEmployeeShiftTable\";\nimport EditEmployeeSelect from \"../Components/EditEmployeeSelect\";\nimport { useSelector } from \"react-redux\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport SendIcon from \"@mui/icons-material/Send\";\n\nconst EditEmployeePage = () => {\n  let token = sessionStorage[\"token\"];\n  const storeData = useSelector((state) => state);\n  const navigate = useNavigate();\n  const params = useParams();\n  const [employee, setEmployee] = useState({});\n  const [updated, setUpdated] = useState(false);\n  const [AllShifts, setAllShifts] = useState({});\n  const [allocateBTN, setAllocateBTN] = useState(false);\n  const [SelectedShiftToAdd, setSelectedShiftToAdd] = useState(\"\");\n  const [AllocateOptions, setAllocateOptions] = useState([]);\n  const [shift_id, setShift_id] = useState(\"\");\n\n  useEffect(async () => {\n    let all_db_data = storeData.db;\n    let employee = all_db_data.employees[params.id];\n    setEmployee(employee);\n    setAllShifts(all_db_data.shifts);\n\n    let Emp_Shift_ids;\n    let options = [];\n    if (all_db_data?.employees[params.id].hasOwnProperty(\"Shifts\")) {\n      Emp_Shift_ids = all_db_data.employees[params.id].Shifts.map((s) => s._id);\n\n      for (let i = 0; i < all_db_data.shifts.length; i++) {\n        if (!Emp_Shift_ids.includes(all_db_data.shifts[i]._id)) {\n          options.push(all_db_data.shifts[i]);\n        }\n      }\n    } else {\n      options = all_db_data.shifts;\n    }\n    setAllocateOptions(options);\n  }, []);\n\n  useEffect(async () => {\n    let resp = await axios.get(\"http://127.0.0.1:5000/getAllFactory\");\n    let all_db_data = resp.data;\n    let employee = all_db_data.employees[params.id];\n    setEmployee(employee);\n    setAllShifts(all_db_data.shifts);\n\n    let Emp_Shift_ids;\n    let options = [];\n    if (all_db_data.employees[params.id].hasOwnProperty(\"Shifts\")) {\n      Emp_Shift_ids = all_db_data.employees[params.id].Shifts.map((s) => s._id);\n\n      for (let i = 0; i < all_db_data.shifts.length; i++) {\n        if (!Emp_Shift_ids.includes(all_db_data.shifts[i]._id)) {\n          options.push(all_db_data.shifts[i]);\n        }\n      }\n    } else {\n      options = all_db_data.shifts;\n    }\n    // return options;\n    setAllocateOptions(options);\n  }, [allocateBTN]);\n\n  const UpdateUserData = async () => {\n    console.log(employee);\n    await employeesUtils.update_employee(token, employee._id, employee);\n    setUpdated(!updated);\n  };\n\n  const DeleteUserData = async () => {\n    await employeesUtils.delete_employee(token, employee._id);\n    navigate(\"/mainPage/employeePage\");\n  };\n\n  const alocate_shift_to_emp = async () => {\n    await employeesUtils.add_shift_to_employee(token, employee._id, shift_id);\n    setAllocateBTN(!allocateBTN);\n  };\n\n  return (\n    <div>\n      <Typography variant=\"h4\" pb={2} color=\"primary.second\">\n        <b> Edit Employee Page</b>\n      </Typography>\n      <Grid>\n        <form>\n          <Typography>First name:</Typography>\n          <TextField\n            varient=\"outlined\"\n            required\n            fullWidth\n            value={employee.FirstName}\n            onChange={(e) =>\n              setEmployee({ ...employee, FirstName: e.target.value })\n            }\n          />\n          <Typography>Last name:</Typography>\n          <TextField\n            varient=\"outlined\"\n            required\n            fullWidth\n            value={employee.LastName}\n            onChange={(e) =>\n              setEmployee({ ...employee, LastName: e.target.value })\n            }\n          />\n          <Typography>Start work year:</Typography>\n          <TextField\n            varient=\"outlined\"\n            required\n            fullWidth\n            value={employee.StartWorkYear}\n            onChange={(e) =>\n              setEmployee({ ...employee, StartWorkYear: e.target.value })\n            }\n          />\n          <Typography>Department: </Typography>\n          {employee.hasOwnProperty(\"DepartmentId\") &&\n            employee.DepartmentId.map((item, index) => {\n              return (\n                <Button\n                  fullWidth\n                  key={index}\n                  variant=\"contained\"\n                  // color=\"secondary\"\n                >\n                  <Link\n                    to={\"/mainPage/editdepartmentPage/\" + item._id}\n                    style={{\n                      color: \"white\",\n                      textDecoration: \"underline\",\n                    }}\n                  >\n                    {item.Name}\n                  </Link>\n                </Button>\n              );\n            })}\n          <Typography>Shifts: </Typography>\n          <EditEmployeeShiftTable employee={employee} />\n          <Typography>Select shift to allocate:</Typography>\n          <EditEmployeeSelect\n            AllocateOptions={AllocateOptions}\n            setShift_id={setShift_id}\n          />\n        </form>\n        <ButtonGroup fullWidth sx={{ m: 5 }}>\n          <Button\n            // type=\"submit\"\n            variant=\"contained\"\n            onClick={UpdateUserData}\n            endIcon={<SendIcon />}\n          >\n            UPDATE\n          </Button>\n          <Button\n            // type=\"submit\"\n            variant=\"contained\"\n            onClick={DeleteUserData}\n            startIcon={<DeleteIcon />}\n          >\n            DELETE\n          </Button>\n          <Button\n            // type=\"submit\"\n            variant=\"contained\"\n            onClick={alocate_shift_to_emp}\n          >\n            Allocate\n          </Button>\n        </ButtonGroup>\n        <br />\n        <br />\n        {allocateBTN && <text>Allocated!</text>}\n        {updated && <text>Updated!</text>}\n      </Grid>\n    </div>\n  );\n};\n\nexport default EditEmployeePage;\n"]},"metadata":{},"sourceType":"module"}